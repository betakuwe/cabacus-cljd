(ns abacus
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]
            ["dart:ui" :as ui]
            [design]))

(def !bead-size (atom {:width 80 :height 48}))

(def !digits (atom (vec (repeat 5 0))))

(defn width->num-digits [width]
  (quot (- width (* 2 design/frame-width) 2) (:width @!bead-size)))

(defn set-num-digits!
  "Pads left of !digits with 0 if extend, drops from left if reduce."
  [num-digits]
  (let [curr-num-digits (count @!digits)]
    (cond
      (> num-digits curr-num-digits)
      (swap! !digits
             #(vec (concat (repeat (- num-digits curr-num-digits) 0) %)))

      (< num-digits curr-num-digits)
      (swap! !digits #(vec (drop (- curr-num-digits num-digits) %))))))

(def bead
  (f/widget
   :width design/bead-width
   :height design/bead-height
   (m/Container .margin (m/EdgeInsets.symmetric .horizontal 1.0))
   .decoration (m/ShapeDecoration .color m/Colors.amber)
   .shape (m/BeveledRectangleBorder .side (m/BorderSide .color m/Colors.red))
   .borderRadius (m/BorderRadius.all
                  (m/Radius.circular (dec (quot design/bead-height 2))))))

(defn rod-stick [.child]
  (f/widget
   (m/Container .decoration design/bead-background .clipBehavior m/Clip.antiAlias)
   (m/Stack .alignment m/Alignment.topCenter .clipBehavior m/Clip.antiAlias)
   .children [(m/Container .width design/rod-width
                           .decoration (m/BoxDecoration .color m/Colors.black))
              child]))

(defn upper-rod [digit-index digit]
  (f/widget
   :width design/bead-width
   :height (* 1.5 design/bead-height)
   rod-stick
   (m/AnimatedAlign .alignment (if (< digit 5)
                                 m/Alignment.topCenter
                                 m/Alignment.bottomCenter)
                    .duration design/bead-animation-duration
                    .curve m/Curves.easeInOutBack)
   (m/GestureDetector .onTapDown (fn [_] (swap! !digits
                                                update
                                                digit-index
                                                #((if (< % 5) + -) % 5))))
   bead))

(defn lower-rod [digit-index digit]
  (f/widget
   :width design/bead-width
   :height (* 4.5 design/bead-height)
   rod-stick
   (m/Column .mainAxisAlignment m/MainAxisAlignment.end)
   .children
   (map (fn [bead-index]
          (f/widget
           (m/AnimatedSlide
            .offset (ui/Offset 0 (if (< bead-index (mod digit 5)) -0.5 0))
            .duration design/bead-animation-duration
            .curve m/Curves.easeInOutBack)
           (m/GestureDetector
            .onTapDown (fn [_] (swap! !digits
                                      update
                                      digit-index
                                      #(+ bead-index
                                          (if (< % 5) 0 5)
                                          (if (<= (mod % 5) bead-index) 1 0)))))
           bead))
        (range 4))))

(defn dot-beam [digit-index-from-right]
  (f/widget :width design/bead-width
            :height design/frame-width
            :when (zero? (mod digit-index-from-right 3))
            m/Center
            (m/Container .height 2 .width 2 .color m/Colors.white)))

(def abacus
  (m/LayoutBuilder
   .builder
   (f/build
    [^m/BoxConstraints {:flds [maxWidth maxHeight]}]
    (do
      ;; set num-digits AFTER widget is done building in this frame
      ;; otherwise leads to setState() or markNeedsBuild() called during build.
      ;; https://stackoverflow.com/a/64702218
      (.addPostFrameCallback
       m/WidgetsBinding.instance
       (fn [_] (-> maxWidth width->num-digits set-num-digits!)))

      (f/widget
       (m/Container .padding (m/EdgeInsets.all design/frame-width)
                    .decoration design/frame-decoration
                    .clipBehavior m/Clip.antiAlias)
       :watch [digits !digits]
       (m/Row .mainAxisSize m/MainAxisSize.min)
       .children
       (map-indexed
        (fn [digit-index digit]
          (m/Column .mainAxisSize m/MainAxisSize.min
                    .children [(upper-rod digit-index digit)
                               (dot-beam (- (count digits) digit-index))
                               (lower-rod digit-index digit)]))
        digits))))))
