(ns main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            [cljd.flutter :as f]
            ["dart:ui" :as ui]
            [globals]
            [abacus]
            [sound]
            [design]))

(def digit-display
  (f/widget
   :get {{{:flds [titleMedium]} .-textTheme} m/Theme}
   :watch [digits globals/!digits]
   (m/Text.rich
    (m/TextSpan
     .text ""
     .style titleMedium
     .children
     (->> (reverse digits)
          (map-indexed
           (fn [i d]
             (m/TextSpan
              .text (str d)
              .style (when (= 2 (mod i 3))
                       (m/TextStyle
                        .decoration m/TextDecoration.underline
                        .decorationStyle ui/TextDecorationStyle.solid)))))
          reverse)))))

(def reset
  (f/widget
   (m/TextButton
    .onPressed (fn []
                 (when @globals/!vibration (s/HapticFeedback.heavyImpact))
                 (when @globals/!sound
                   (->> (map #(+ (mod % 5) (quot % 5)) @globals/!digits)
                        (apply +)
                        sound/play-async))
                 (swap! globals/!digits #(vec (repeat (count %) 0)))))
   :get {{{:flds [titleLarge]} .-textTheme} m/Theme}
   :watch [color globals/!seed-color]
   (m/Text "ðŸ…²ðŸ…°ðŸ…±ðŸ…°ðŸ…²ðŸ†„ðŸ†‚"
           .style (.copyWith titleLarge .color (design/text-color color)))))

(def settings-button
  (f/widget
   :context ctx
   (m/IconButton
    .onPressed
    (fn [] (m/showDialog
            .context ctx
            .builder
            (f/build
             (m/AlertDialog .title (m/Text "Settings"))
             .content
             (m/Column .mainAxisSize m/MainAxisSize.min
                       .mainAxisAlignment m/MainAxisAlignment.start)
             .children
             [;; Reset button position
              (f/widget
               :watch [pos globals/!reset-position]
               (m/Row .mainAxisAlignment m/MainAxisAlignment.spaceBetween)
               .children
               [(m/Text "Reset Button")
                (m/SegmentedButton
                 .showSelectedIcon false
                 .segments [(m/ButtonSegment .value :left
                                             .label (m/Text "Left"))
                            (m/ButtonSegment .value :right
                                             .label (m/Text "Right"))]
                 .selected #{pos}
                 .onSelectionChanged
                 #(reset! globals/!reset-position (first %)))])

              (m/SizedBox .height 10)

              ;; Bead size setting
              (f/widget
               :watch [size globals/!bead-size]
               (m/Row .mainAxisAlignment m/MainAxisAlignment.spaceBetween)
               .children
               [(m/Text "Bead size")
                (m/SizedBox .width 20)
                (m/SegmentedButton
                 .showSelectedIcon false
                 .segments
                 [(m/ButtonSegment .value :small .label (m/Text "Small"))
                  (m/ButtonSegment .value :medium .label (m/Text "Medium"))
                  (m/ButtonSegment .value :large .label (m/Text "Large"))]
                 .selected #{size}
                 .onSelectionChanged #(reset! globals/!bead-size (first %)))])

              (m/SizedBox .height 10)

              ;; Vibration and Sound setting
              (m/Row
               .children
               [;; Vibration setting
                (f/widget
                 :watch [vibration globals/!vibration]
                 m/Row
                 .children
                 [(m/Icon (if vibration m/Icons.vibration m/Icons.crop_portrait))
                  (m/SizedBox .width 10)
                  (m/Text "Vibration")
                  (m/SizedBox .width 10)
                  (m/Switch .value vibration
                            .onChanged #(reset! globals/!vibration %))])

                (m/SizedBox .width 20)

                ;; Sound setting
                (f/widget
                 :watch [sound globals/!sound]
                 m/Row
                 .children
                 [(m/Icon (if sound m/Icons.volume_up m/Icons.volume_off))
                  (m/SizedBox .width 10)
                  (m/Text "Sound")
                  (m/SizedBox .width 10)
                  (m/Switch .value sound
                            .onChanged #(reset! globals/!sound %))])])]))

      nil)
    .icon (m/Icon m/Icons.settings))))

(def colors-button
  (f/widget
   :context ctx
   (m/IconButton
    .onPressed
    (fn [] (m/showDialog
            .context ctx
            .builder (f/build
                      (m/AlertDialog .title (m/Text "Colors"))
                      .content
                      :width 400
                      :height 200
                      (m/GridView.count .shrinkWrap true
                                        .crossAxisSpacing 10
                                        .crossAxisCount 3)
                      .children
                      (map
                       (fn [list-color]
                         (m/ChoiceChip
                          .elevation 2
                          .label (abacus/bead list-color)
                          .selected (= @globals/!seed-color list-color)
                          .showCheckmark false
                          .onSelected
                          #(when % (reset! globals/!seed-color list-color))))
                       design/colors)))
      nil)
    .icon (m/Icon m/Icons.palette_rounded))))

(def above-abacus
  (f/widget
   :watch [reset-pos globals/!reset-position]
   (m/Row .mainAxisAlignment m/MainAxisAlignment.spaceBetween)
   .children ((case reset-pos :left identity :right reverse)
              [reset
               digit-display
               (m/Row .children [colors-button settings-button])])))

(defn main []
  ;; Needs to be initialized before below settings
  (m/WidgetsFlutterBinding.ensureInitialized)
  ;; Set landscape
  (s/SystemChrome.setPreferredOrientations
   [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  ;; Makes system overlay transparent
  (s/SystemChrome.setSystemUIOverlayStyle
   (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent))
  ;; Hides the top system bar
  (s/SystemChrome.setEnabledSystemUIMode s/SystemUiMode.immersiveSticky)
  ;; Initialize audioplayers
  (sound/init)

  (f/run
   :watch [color globals/!seed-color]
   (m/MaterialApp
    .title "CABACUS"
    .theme (m/ThemeData
            .colorScheme (design/color-scheme color)
            .iconTheme (m/IconThemeData .color (design/text-color color))
            .textTheme nil
            .splashFactory m/NoSplash.splashFactory
            .useMaterial3 true))
   .home (m/Container .alignment m/Alignment.center
                      .color (design/home-background-color color))
   m/SafeArea
   (m/Column .mainAxisAlignment m/MainAxisAlignment.center
             .mainAxisSize m/MainAxisSize.min)
   .children [above-abacus abacus/abacus]))
