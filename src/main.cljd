(ns main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/services.dart" :as s]
            ["dart:core" :as dc]
            ["dart:ui" :as ui]
            [cljd.flutter :as f]))

(defn make-landscape []
  (m/WidgetsFlutterBinding.ensureInitialized)
  (s/SystemChrome.setPreferredOrientations
    [s/DeviceOrientation.landscapeLeft s/DeviceOrientation.landscapeRight])
  (s/SystemChrome.setSystemUIOverlayStyle
    (s/SystemUiOverlayStyle .systemNavigationBarColor m/Colors.transparent)))

(def bead-height 48)
(def bead-width 80)
(def rod-width 10)
(def bead-animation-duration (dc/Duration .milliseconds 300))
(def seed-color (m/Colors.amber))
(def color-scheme (m/ColorScheme.fromSeed .seedColor seed-color))
(def bead-background-color (.-surfaceVariant ^m/ColorScheme color-scheme))
(def bead-background (m/BoxDecoration
                       .color bead-background-color
                       .border (m/Border.all
                                 .color bead-background-color
                                 .width 0)))

(def bead
  (f/widget
    :width bead-width
    :height bead-height
    (m/Container .margin (m/EdgeInsets.symmetric .horizontal 1.0))
    .decoration (m/ShapeDecoration .color m/Colors.amber)
    .shape (m/BeveledRectangleBorder .side (m/BorderSide .color m/Colors.red))
    .borderRadius (m/BorderRadius.all
                    (m/Radius.circular (dec (quot bead-height 2))))))

(defn rod-stick [.child]
  (f/widget
    (m/Container .decoration bead-background .clipBehavior m/Clip.antiAlias)
    (m/Stack .alignment m/Alignment.topCenter .clipBehavior m/Clip.antiAlias)
    .children [(m/Container
                 .width rod-width
                 .decoration (m/BoxDecoration .color m/Colors.black))
               child]))

(def !digits (atom (vector 0 0 0)))

(defn upper-rod [digit-index]
  (f/widget
    :width bead-width
    :height (* 1.5 bead-height)
    rod-stick
    :watch [digits !digits]
    (m/AnimatedAlign
      .alignment (if (< (digits digit-index) 5)
                   m/Alignment.topCenter
                   m/Alignment.bottomCenter)
      .duration bead-animation-duration
      .curve m/Curves.easeInOutBack)
    (m/GestureDetector
      .onTapDown (fn [_] (swap! !digits
                                update
                                digit-index
                                #((if (< % 5) + -) % 5))))
    bead))

(defn lower-rod [digit-index]
  (f/widget
    :width bead-width
    :height (* 4.5 bead-height)
    rod-stick
    (m/Column .mainAxisAlignment m/MainAxisAlignment.end)
    .children
    (->> (range 4)
         (map (fn [bead-index]
                (f/widget
                  :watch [digits !digits]
                  (m/AnimatedSlide
                    .offset (ui/Offset 0 (if (< bead-index
                                                (mod (digits digit-index) 5))
                                           -0.5
                                           0))
                    .duration bead-animation-duration
                    .curve m/Curves.easeInOutBack)
                  (m/GestureDetector
                    .onTapDown
                    (fn [_]
                      (swap! !digits
                             update
                             digit-index
                             #(+ bead-index
                                 (if (< % 5) 0 5)
                                 (if (<= (mod % 5) bead-index) 1 0)))))
                  bead))))))

(defn rod [digit-index]
  (m/Column .children [(upper-rod digit-index) (lower-rod digit-index)]))

(defn main
  []
  ;(make-landscape)
  (f/run
    (m/MaterialApp
      .title "CABACUS"
      .theme (m/ThemeData .primarySwatch m/Colors.pink))
    .home
    :watch [digit !digit
            digits !digits]
    (m/Scaffold
      .appBar (m/AppBar .title (m/Text (apply str "Current digit: " digits))))
    .body
    (m/Row .mainAxisSize m/MainAxisSize.min)
    .children
    [(rod 0) (rod 1) (rod 2)]))
