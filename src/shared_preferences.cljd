(ns shared-preferences
  (:require ["package:shared_preferences/shared_preferences.dart" :as sp]))

(def ^:private instance (atom nil))

(defn init-async
  "Must be called before any data can be persistent. Call it in `main`"
  []
  (reset! instance (await (sp/SharedPreferences.getInstance))))

(defn- get-bool [k] (.getBool ^sp/SharedPreferences @instance k))
(defn- set-bool! [k v] (.setBool ^sp/SharedPreferences @instance k v))

(defn- get-int [k] (.getInt ^sp/SharedPreferences @instance k))
(defn- set-int! [k v] (.setInt ^sp/SharedPreferences @instance k v))

(defn- get-double [k] (.getDouble ^sp/SharedPreferences @instance k))
(defn- set-double! [k v] (.setDouble ^sp/SharedPreferences @instance k v))

(defn- get-string [k] (.getString ^sp/SharedPreferences @instance k))
(defn- set-string! [k v] (.setString ^sp/SharedPreferences @instance k v))

(defn- get-keyword [k] (keyword (get-string k)))
(defn- set-keyword! [k v] (set-string! k (name v)))

(defn persistent-atom
  "Creates an atom whose data is persistent using SharedPreferences.
  Currently only works with `bool`, `int`, `double`, `String`, `keyword` values.
  `k` is a keyword name assigned to the atom, i.e. `:sound`.
  `v` is the default value.
  NOTE: Any new value of the atom must retain the same value type."
  [k v]
  (let [[getter setter] (cond (boolean? v) [get-bool set-bool!]
                              (int? v) [get-int set-int!]
                              (double? v) [get-double set-double!]
                              (string? v) [get-string set-string!]
                              (keyword? v) [get-keyword set-keyword!])
        k-name (name k)
        val (if (and (some? @instance)
                     (.containsKey ^sp/SharedPreferences @instance k-name))
              (getter k-name)
              v)
        new-atom (atom val)]
    (add-watch new-atom k (fn [_ _ _ new-val]
                            (when (some? @instance) (setter k-name new-val))))))

